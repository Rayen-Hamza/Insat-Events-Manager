generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  password         String?   // Null for Google-auth users
  image            String?
  role             Role      @default(USER)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]

  googleId         String?   @unique
  accessToken      String?   // Consider moving to Account model
  refreshToken     String?   // Consider moving to Account model
  verifyToken      String?
  resetPassToken   String?

  interestedEvents UserEventInterest[]
  managedClub      Club?     @relation("ClubManager")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Club {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  managerId   String   @unique
  manager     User     @relation("ClubManager", fields: [managerId], references: [id])

  events      Event[]
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  date        DateTime
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clubId      String
  club        Club     @relation(fields: [clubId], references: [id])

  interestedUsers UserEventInterest[]
}

model UserEventInterest {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  addedAt   DateTime @default(now())
  synced    Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

enum Role {
  USER
  CLUB_MANAGER
  ADMIN
}